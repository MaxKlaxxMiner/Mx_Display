using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO.Ports;
using System.Threading;
using System.Windows.Forms;
using DisplayCmd = SerialDisplay.DisplayCmdAdafruit;

namespace SerialDisplay
{
  public unsafe sealed partial class DisplayForm : Form
  {
    public readonly static uint[] PaletteColor24 = { 0x000000, 0x0000a8, 0x00a800, 0x00a8a8, 0xa80000, 0xa800a8, 0xa85400, 0xa8a8a8, 0x545454, 0x5454fc, 0x54fc54, 0x54fcfc, 0xfc5454, 0xfc54fc, 0xfcfc54, 0xfcfcfc, 0x000000, 0x141414, 0x202020, 0x2c2c2c, 0x383838, 0x444444, 0x505050, 0x606060, 0x707070, 0x808080, 0x909090, 0xa0a0a0, 0xb4b4b4, 0xc8c8c8, 0xe0e0e0, 0xfcfcfc, 0x0000fc, 0x4000fc, 0x7c00fc, 0xbc00fc, 0xfc00fc, 0xfc00bc, 0xfc007c, 0xfc0040, 0xfc0000, 0xfc4000, 0xfc7c00, 0xfcbc00, 0xfcfc00, 0xbcfc00, 0x7cfc00, 0x40fc00, 0x00fc00, 0x00fc40, 0x00fc7c, 0x00fcbc, 0x00fcfc, 0x00bcfc, 0x007cfc, 0x0040fc, 0x7c7cfc, 0x9c7cfc, 0xbc7cfc, 0xdc7cfc, 0xfc7cfc, 0xfc7cdc, 0xfc7cbc, 0xfc7c9c, 0xfc7c7c, 0xfc9c7c, 0xfcbc7c, 0xfcdc7c, 0xfcfc7c, 0xdcfc7c, 0xbcfc7c, 0x9cfc7c, 0x7cfc7c, 0x7cfc9c, 0x7cfcbc, 0x7cfcdc, 0x7cfcfc, 0x7cdcfc, 0x7cbcfc, 0x7c9cfc, 0xb4b4fc, 0xc4b4fc, 0xd8b4fc, 0xe8b4fc, 0xfcb4fc, 0xfcb4e8, 0xfcb4d8, 0xfcb4c4, 0xfcb4b4, 0xfcc4b4, 0xfcd8b4, 0xfce8b4, 0xfcfcb4, 0xe8fcb4, 0xd8fcb4, 0xc4fcb4, 0xb4fcb4, 0xb4fcc4, 0xb4fcd8, 0xb4fce8, 0xb4fcfc, 0xb4e8fc, 0xb4d8fc, 0xb4c4fc, 0x000070, 0x1c0070, 0x380070, 0x540070, 0x700070, 0x700054, 0x700038, 0x70001c, 0x700000, 0x701c00, 0x703800, 0x705400, 0x707000, 0x547000, 0x387000, 0x1c7000, 0x007000, 0x00701c, 0x007038, 0x007054, 0x007070, 0x005470, 0x003870, 0x001c70, 0x383870, 0x443870, 0x543870, 0x603870, 0x703870, 0x703860, 0x703854, 0x703844, 0x703838, 0x704438, 0x705438, 0x706038, 0x707038, 0x607038, 0x547038, 0x447038, 0x387038, 0x387044, 0x387054, 0x387060, 0x387070, 0x386070, 0x385470, 0x384470, 0x505070, 0x585070, 0x605070, 0x685070, 0x705070, 0x705068, 0x705060, 0x705058, 0x705050, 0x705850, 0x706050, 0x706850, 0x707050, 0x687050, 0x607050, 0x587050, 0x507050, 0x507058, 0x507060, 0x507068, 0x507070, 0x506870, 0x506070, 0x505870, 0x000040, 0x100040, 0x200040, 0x300040, 0x400040, 0x400030, 0x400020, 0x400010, 0x400000, 0x401000, 0x402000, 0x403000, 0x404000, 0x304000, 0x204000, 0x104000, 0x004000, 0x004010, 0x004020, 0x004030, 0x004040, 0x003040, 0x002040, 0x001040, 0x202040, 0x282040, 0x302040, 0x382040, 0x402040, 0x402038, 0x402030, 0x402028, 0x402020, 0x402820, 0x403020, 0x403820, 0x404020, 0x384020, 0x304020, 0x284020, 0x204020, 0x204028, 0x204030, 0x204038, 0x204040, 0x203840, 0x203040, 0x202840, 0x2c2c40, 0x302c40, 0x342c40, 0x3c2c40, 0x402c40, 0x402c3c, 0x402c34, 0x402c30, 0x402c2c, 0x40302c, 0x40342c, 0x403c2c, 0x40402c, 0x3c402c, 0x34402c, 0x30402c, 0x2c402c, 0x2c4030, 0x2c4034, 0x2c403c, 0x2c4040, 0x2c3c40, 0x2c3440, 0x2c3040, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000 };
    public readonly static ushort[] PaletteColor16 = { 0x0000, 0x0015, 0x0540, 0x0555, 0xa800, 0xa815, 0xaaa0, 0xad55, 0x52aa, 0x52bf, 0x57ea, 0x57ff, 0xfaaa, 0xfabf, 0xffea, 0xffff, 0x0000, 0x10a2, 0x2104, 0x2965, 0x39c7, 0x4228, 0x528a, 0x630c, 0x738e, 0x8410, 0x9492, 0xa514, 0xb5b6, 0xce59, 0xe71c, 0xffff, 0x001f, 0x401f, 0x781f, 0xb81f, 0xf81f, 0xf817, 0xf80f, 0xf808, 0xf800, 0xfa00, 0xfbe0, 0xfde0, 0xffe0, 0xbfe0, 0x7fe0, 0x47e0, 0x07e0, 0x07e8, 0x07ef, 0x07f7, 0x07ff, 0x05ff, 0x03ff, 0x021f, 0x7bff, 0x9bff, 0xbbff, 0xdbff, 0xfbff, 0xfbfb, 0xfbf7, 0xfbf3, 0xfbef, 0xfcef, 0xfdef, 0xfeef, 0xffef, 0xdfef, 0xbfef, 0x9fef, 0x7fef, 0x7ff3, 0x7ff7, 0x7ffb, 0x7fff, 0x7eff, 0x7dff, 0x7cff, 0xb5bf, 0xc5bf, 0xddbf, 0xedbf, 0xfdbf, 0xfdbd, 0xfdbb, 0xfdb8, 0xfdb6, 0xfe36, 0xfed6, 0xff56, 0xfff6, 0xeff6, 0xdff6, 0xc7f6, 0xb7f6, 0xb7f8, 0xb7fb, 0xb7fd, 0xb7ff, 0xb75f, 0xb6df, 0xb63f, 0x000e, 0x180e, 0x380e, 0x500e, 0x700e, 0x700a, 0x7007, 0x7003, 0x7000, 0x70e0, 0x71c0, 0x72a0, 0x7380, 0x5380, 0x3b80, 0x1b80, 0x0380, 0x0383, 0x0387, 0x038a, 0x038e, 0x02ae, 0x01ce, 0x00ee, 0x39ce, 0x41ce, 0x51ce, 0x61ce, 0x71ce, 0x71cc, 0x71ca, 0x71c8, 0x71c7, 0x7227, 0x72a7, 0x7307, 0x7387, 0x6387, 0x5387, 0x4387, 0x3b87, 0x3b88, 0x3b8a, 0x3b8c, 0x3b8e, 0x3b0e, 0x3aae, 0x3a2e, 0x528e, 0x5a8e, 0x628e, 0x6a8e, 0x728e, 0x728d, 0x728c, 0x728b, 0x728a, 0x72ca, 0x730a, 0x734a, 0x738a, 0x6b8a, 0x638a, 0x5b8a, 0x538a, 0x538b, 0x538c, 0x538d, 0x538e, 0x534e, 0x530e, 0x52ce, 0x0008, 0x1008, 0x2008, 0x3008, 0x4008, 0x4006, 0x4004, 0x4002, 0x4000, 0x4080, 0x4100, 0x4180, 0x4200, 0x3200, 0x2200, 0x1200, 0x0200, 0x0202, 0x0204, 0x0206, 0x0208, 0x0188, 0x0108, 0x0088, 0x2108, 0x2908, 0x3108, 0x3908, 0x4108, 0x4107, 0x4106, 0x4105, 0x4104, 0x4144, 0x4184, 0x41c4, 0x4204, 0x3a04, 0x3204, 0x2a04, 0x2204, 0x2205, 0x2206, 0x2207, 0x2208, 0x21c8, 0x2188, 0x2148, 0x2968, 0x3168, 0x3168, 0x3968, 0x4168, 0x4167, 0x4166, 0x4166, 0x4165, 0x4185, 0x41a5, 0x41e5, 0x4205, 0x3a05, 0x3205, 0x3205, 0x2a05, 0x2a06, 0x2a06, 0x2a07, 0x2a08, 0x29e8, 0x29a8, 0x2988, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000 };

    public int color565(int r, int g, int b) { return (((r) & 0xF8) << 8 | ((g) & 0xFC) << 3 | (b&0xff) >> 3); }

    const string DisplayPort = "COM12";

    readonly SerialPort serialPort = new SerialPort(DisplayPort, 500000);
    static readonly Queue<byte[]> buffers = new Queue<byte[]>();
    static readonly byte[] buffer = new byte[65536];
    static int bufferReadPos;
    static int bufferWritePos;
    const int MaxCmdLength = 1 + sizeof(short) * 7;

    public DisplayForm()
    {
      InitializeComponent();
      var mainThread = Thread.CurrentThread;
      Text = "Display: " + DisplayCmd.Width + " x " + DisplayCmd.Height + " @" + DisplayPort;
      new Thread(() =>
      {
        while (mainThread.IsAlive)
        {
          if (!serialPort.IsOpen)
          {
            try
            {
              serialPort.Open();
            }
            catch { }
            Thread.Sleep(10);
            continue;
          }
          int count = Math.Min(serialPort.BytesToRead, 4096);
          if (count == 0) continue;
          var buf = new byte[count];
          int c = serialPort.Read(buf, 0, count);
          if (c == count)
          {
            lock (buffers)
            {
              buffers.Enqueue(buf);
            }
          }
          Thread.Sleep(0);
        }
      }).Start();
    }

    Bitmap bitmap;

    static DisplayForm()
    {
      bufferReadPos = 0;
    }

    void TestImage()
    {
      var bitmapData = bitmap.LockBits(new Rectangle(0, 0, DisplayCmd.Width, DisplayCmd.Height), ImageLockMode.WriteOnly, PixelFormat.Format32bppRgb);
      var bitmapPtr = (uint*)bitmapData.Scan0;

      for (uint y = 0; y < DisplayCmd.Height; y++)
      {
        for (uint x = 0; x < DisplayCmd.Width; x++)
        {
          uint c = x * 255 / DisplayCmd.Width;
          if (y < DisplayCmd.Height / 4) bitmapPtr[x + y * DisplayCmd.Width] = c << 16;
          else if (y < DisplayCmd.Height / 4 * 2) bitmapPtr[x + y * DisplayCmd.Width] = c << 8;
          else if (y < DisplayCmd.Height / 4 * 3) bitmapPtr[x + y * DisplayCmd.Width] = c;
          else bitmapPtr[x + y * DisplayCmd.Width] = c | c << 8 | c << 16;
        }
      }

      bitmap.UnlockBits(bitmapData);
    }

    static bool CommandAvail()
    {
      int filled = bufferWritePos - bufferReadPos;
      if (filled >= MaxCmdLength) return true;

      lock (buffers)
      {
        if (buffers.Count > 0)
        {
          var newBuffer = buffers.Dequeue();
          if (newBuffer.Length > buffer.Length - bufferWritePos)
          {
            Array.Copy(buffer, bufferReadPos, buffer, 0, filled);
            bufferWritePos -= bufferReadPos;
            bufferReadPos = 0;
          }
          Array.Copy(newBuffer, 0, buffer, bufferWritePos, newBuffer.Length);
          bufferWritePos += newBuffer.Length;
          return CommandAvail();
        }
      }

      return filled >= DisplayCmd.CommandLength(buffer[bufferReadPos]);
    }

    void displayTimer_Tick(object sender, EventArgs e)
    {
      if (bitmap == null)
      {
        bitmap = new Bitmap(DisplayCmd.Width, DisplayCmd.Height, PixelFormat.Format32bppRgb);
        BackgroundImage = bitmap;
        TestImage();
      }

      if (!CommandAvail()) return;

      var bitmapData = bitmap.LockBits(new Rectangle(0, 0, DisplayCmd.Width, DisplayCmd.Height), ImageLockMode.WriteOnly, PixelFormat.Format32bppRgb);
      var bitmapPtr = (uint*)bitmapData.Scan0;

      while (CommandAvail())
      {
        bufferReadPos += DisplayCmd.Execute(buffer, bufferReadPos, bitmapPtr);
      }

      bitmap.UnlockBits(bitmapData);
      Invalidate();
    }

    protected override void OnPaintBackground(PaintEventArgs pevent)
    {
      if (BackgroundImage != null)
      {
        pevent.Graphics.InterpolationMode = InterpolationMode.NearestNeighbor;
        //pevent.Graphics.Clear(BackColor);
        pevent.Graphics.DrawImage(BackgroundImage, 0, 0, ClientSize.Width, ClientSize.Height);
      }
      else
      {
        base.OnPaintBackground(pevent);
      }
    }

    private void DisplayForm_Load(object sender, EventArgs e)
    {
      int sizeX = DisplayCmd.Width;
      int sizeY = DisplayCmd.Height;
      var screen = Screen.PrimaryScreen.Bounds.Size;
      while (sizeX + DisplayCmd.Width < screen.Width - 32 && sizeY + DisplayCmd.Height < screen.Height - 32)
      {
        sizeX += DisplayCmd.Width;
        sizeY += DisplayCmd.Height;
      }
      SetClientSizeCore(sizeX, sizeY);
      Top = 0;
    }

    private void DisplayForm_Resize(object sender, EventArgs e)
    {
      Refresh();
    }
  }
}
